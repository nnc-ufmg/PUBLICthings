#define numero_botoes 3
#define TamanhoMaxDaTabela 10000
#define DEBOUNCE_TIME 70
#define BlinkTimeInterval 1000
#define numero_botoesOUT 2


int botoes[numero_botoes] = {52, 50, 48};  // Pinos dos botões
int botoesOUT[numero_botoesOUT] = {55, 53};  // Pinos de saída para LED
int TABELAEVENTOS_botoes[TamanhoMaxDaTabela];
unsigned long TABELAEVENTOS_tempo[TamanhoMaxDaTabela];
long int countTabela = 0;
unsigned long tempoUltimaLeitura[numero_botoes] = {0, 0}; 
unsigned long tempoAtual = 0;
unsigned long tempoBLINK = 0;
bool bBlinkState = false;
bool estadoAnterior[numero_botoes] = {LOW,LOW};
unsigned long tempoUltimaLeituraTabela = 0;
bool estadoAnteriorBotao13 = LOW;
bool estadoAtual;

int posImprimirMatriz = 0;

void setup() {
  Serial.begin(9600);

  // Programar os pinos de saída para o LED
  for (int i = 0; i < numero_botoesOUT; i++) {
    pinMode(botoesOUT[i], OUTPUT);
  }

  // Configura os pinos dos botões como entradas
  for (int i = 0; i < numero_botoes; i++) {
    pinMode(botoes[i], INPUT);
  }


  

  pinMode(46, INPUT);  // Botão de impressão
}

void ler_botoes() {
  for (int i = 0; i < numero_botoes; i++) {
    estadoAtual = digitalRead(botoes[i]);
    if (estadoAtual == HIGH && estadoAnterior[i] == LOW) {
      if ((tempoAtual - tempoUltimaLeitura[i]) > DEBOUNCE_TIME) {
       Serial.print("O botão ");
        Serial.print(i);
        Serial.println(" foi pressionado");

        tempoUltimaLeitura[i] = tempoAtual;
        TABELAEVENTOS_botoes[countTabela] = i;
        TABELAEVENTOS_tempo[countTabela] = tempoAtual;
        countTabela++;
      }
    }
    estadoAnterior[i] = estadoAtual;
  }
}

void imprimirMatriz() {
  Serial.println("Imprimindo tabela:");
  for (int i = 0; i < countTabela; i++) {
    Serial.print("Botão ");
    Serial.print(TABELAEVENTOS_botoes[i]);
    Serial.print(" Pressionado em: ");
    Serial.println(TABELAEVENTOS_tempo[i]);
  }
}

void loop() {
  tempoAtual = millis();
  ler_botoes();
  
  // Controle do LED com intervalo de blink
  if ((tempoBLINK + BlinkTimeInterval) < millis()) {
    tempoBLINK = millis();
    digitalWrite(botoesOUT[1], bBlinkState);  // Controla o LED no pino 10
    bBlinkState = !bBlinkState;
  }

  if ((tempoAtual - tempoUltimaLeituraTabela) > DEBOUNCE_TIME) {
    estadoAtual = digitalRead(46);
    if (estadoAtual == HIGH && estadoAnteriorBotao13 == LOW) {
      imprimirMatriz();
      tempoUltimaLeituraTabela = tempoAtual;  // Atualiza o tempo da última leitura do botão
    }
    estadoAnteriorBotao13 = estadoAtual;  // Atualiza o estado anterior do botão 13
  }
}
