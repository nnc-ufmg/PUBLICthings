#include <SPI.h>
#include <SD.h>

#define numero_botoes 5
#define TamanhoMaxDaTabela 100
#define DEBOUNCE_TIME 70
#define BlinkTimeInterval 1000
#define numero_botoesOUT 3

const int chipSelect = 38; //pino CS do cartão
int botoes[numero_botoes] = {4, 3, 18, 19, 20};  // Pinos dos botões
int botoesOUT[numero_botoesOUT] = {55, 53, 2};  // Pinos de saída para LED

int TABELAEVENTOS_botoes[TamanhoMaxDaTabela];
unsigned long TABELAEVENTOS_tempo[TamanhoMaxDaTabela];
long int countTabela = 0;
unsigned long tempoUltimaLeitura[numero_botoes] = {0, 0}; 
unsigned long tempoAtual = 0;
unsigned long tempoBLINK = 0;
bool bBlinkState = false;
bool estadoAnterior[numero_botoes] = {LOW, LOW, LOW, LOW};
unsigned long tempoUltimaLeituraTabela = 0;
bool estadoAnteriorBotao13 = LOW;
bool estadoAtual;
File dataFile;
int tempoLED=0;

void setup() {
  Serial.begin(9600);

  // Inicializa o cartão SD
  if (!SD.begin(chipSelect)) {
    Serial.println("Falha ao conectar com o cartao SD");
    return;
  }
  Serial.println("Cartao SD conectado");

  // Configura os pinos de saída para LED
  for (int i = 0; i < numero_botoesOUT; i++) {
    pinMode(botoesOUT[i], OUTPUT);
  }

  // Configura os pinos dos botões como entradas
  for (int i = 0; i < numero_botoes; i++) {
    pinMode(botoes[i], INPUT);
  }

  pinMode(46, INPUT);  // Botão para impressão 
  
  // Abre o arquivo para gravação (modo append, para não sobrescrever os dados)
  dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    Serial.println("Arquivo aberto para gravação.");
  } else {
    Serial.println("Falha ao abrir o arquivo.");
  }
}

void ler_botoes() {
  
  for (int i = 0; i < numero_botoes; i++) {
    estadoAtual = digitalRead(botoes[i]);
    if (estadoAtual == HIGH && estadoAnterior[i] == LOW) {
      if ((tempoAtual - tempoUltimaLeitura[i]) > DEBOUNCE_TIME) {
        digitalWrite(2, HIGH);
        tempoLED = 10000;

        Serial.print("O botão ");
        Serial.print(i);
        Serial.print(" foi pressionado: ");
        Serial.println(tempoAtual);
        // Registra o evento do botão
        tempoUltimaLeitura[i] = tempoAtual;
        TABELAEVENTOS_botoes[countTabela] = i;
        TABELAEVENTOS_tempo[countTabela] = tempoAtual;
        countTabela++;

        // Escreve os dados no arquivo
        if (dataFile) {
          dataFile.print(tempoAtual);  // Tempo em unidades de 100 ms
          dataFile.print("\t");
          dataFile.print(i);  // Botão pressionado
          dataFile.println();
        } else {
          // Verifique se a gravação falhou
          Serial.println("Falha ao gravar no arquivo.");
        }
      }
    }
    else {
      if(tempoLED > 0){
        digitalWrite(2, HIGH);
        tempoLED --;
      }else{
        digitalWrite(2, LOW);
      }
    }
    estadoAnterior[i] = estadoAtual;  // Atualiza o estado anterior do botão
  }
}
void imprimirMatriz() {
  Serial.println("Imprimindo tabela:");
  for (int i = 0; i < countTabela; i++) {
    Serial.print("Botão ");
    Serial.print(TABELAEVENTOS_botoes[i]);
    Serial.print(" Pressionado em: ");
    Serial.println(TABELAEVENTOS_tempo[i]);
  }
}

void verificarConteudoDoArquivo() {
  Serial.println("Verificando conteúdo do arquivo");
  
  if (dataFile) {  // Verifica se o arquivo foi aberto corretamente
    // Posiciona o ponteiro de leitura no início do arquivo
    dataFile.seek(0);
    
    Serial.println("Conteúdo do arquivo:");
    while (dataFile.available()) {
      Serial.write(dataFile.read());  // Lê e imprime o conteúdo
    }
   
  } else {
    Serial.println("Falha ao abrir o arquivo para leitura.");
  }
}


void loop() {
  tempoAtual = millis();
  ler_botoes();

  // Controle do LED com intervalo de blink
  if ((tempoBLINK + BlinkTimeInterval) < millis()) {
    tempoBLINK = millis();
    digitalWrite(botoesOUT[1], bBlinkState);  // Controla o LED no pino 53
    bBlinkState = !bBlinkState;
  }

  // Imprime o conteúdo do arquivo quando o botão 46 for pressionado
  if ((tempoAtual - tempoUltimaLeituraTabela) > DEBOUNCE_TIME) {
    estadoAtual = digitalRead(46);
    if (estadoAtual == HIGH && estadoAnteriorBotao13 == LOW) {
      verificarConteudoDoArquivo();  // Chama a função para verificar o conteúdo
      //imprimirMatriz();
      tempoUltimaLeituraTabela = tempoAtual;
    }
    estadoAnteriorBotao13 = estadoAtual;
  }
}
