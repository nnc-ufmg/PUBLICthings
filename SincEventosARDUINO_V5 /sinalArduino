#define pinoEmissor1 2  // Pino  de envio 1
#define pinoEmissor2 3  // Pino de envio 2
#define pinoBotao 11    // Pino do botão
#define DEBOUNCE_TIME 70

bool estadoAnterior = LOW;  // Estado anterior do botão
bool estadoAtual;           // Estado atual do botão
unsigned long tempoUltimaLeitura = 0;  // Tempo da última leitura do botão
unsigned long tempoAtual = 0;  // Tempo atual

void setup() {
  Serial.begin(9600);  // Inicializa a comunicação serial para depuração

  pinMode(pinoEmissor1, OUTPUT);
  pinMode(pinoEmissor2, OUTPUT);
  pinMode(pinoBotao, INPUT);  // Usa resistor de pull-up interno
}

void enviarSinalQuandoApertaBotao(){

  // Verifica se o botão foi pressionado
  if (estadoAtual && !estadoAnterior) {
    if ((tempoAtual - tempoUltimaLeitura) > DEBOUNCE_TIME) {
      Serial.print("O botão foi pressionado em: ");
      Serial.println(tempoAtual);

      digitalWrite(pinoEmissor1, HIGH);
      digitalWrite(pinoEmissor2, HIGH);
      tempoUltimaLeitura = tempoAtual;
    }
  }

  // Verifica se o botão foi solto
  if (!estadoAtual && estadoAnterior) {
    if ((tempoAtual - tempoUltimaLeitura) > DEBOUNCE_TIME) {
      digitalWrite(pinoEmissor1, LOW);
      digitalWrite(pinoEmissor2, LOW);
      tempoUltimaLeitura = tempoAtual;
    }
  }

  // Atualiza o estado anterior
  estadoAnterior = estadoAtual;
}

void enviarSinaisaCadaDoisSegundosJuntos(){

  // Envia HIGH para os pinos por 2 segundos
  digitalWrite(pinoEmissor1, HIGH);
  digitalWrite(pinoEmissor2, HIGH);
  delay(2000);  // Delay de 2 segundos

  // Envia LOW para os pinos por 2 segundos
  digitalWrite(pinoEmissor1, LOW);
  digitalWrite(pinoEmissor2, LOW);
  delay(2000);  // Delay de 2 segundos


}

void enviarSinaisComDiferencaDeUmMilissegundo(){
// Envia HIGH para pinoEmissor1
  digitalWrite(pinoEmissor1, HIGH);
  delay(1);  // Aguarda 1 milissegundo

  // Envia HIGH para pinoEmissor2
  digitalWrite(pinoEmissor2, HIGH);

  // Aguarda 2 segundos com ambos os pinos em HIGH
  delay(2000);  // Delay de 2 segundos

  // Envia LOW para pinoEmissor1
  digitalWrite(pinoEmissor1, LOW);

  // Aguarda 1 milissegundo antes de desligar o pinoEmissor2
  delay(1);  // Aguarda 1 milissegundo

  // Envia LOW para pinoEmissor2
  digitalWrite(pinoEmissor2, LOW);

  // Aguarda 2 segundos com ambos os pinos em LOW
  delay(2000);  // Delay de 2 segundos


}

void loop() {
  tempoAtual = millis();
  estadoAtual = !digitalRead(pinoBotao);  // Inverte a leitura por causa do INPUT_PULLUP
  // enviarSinalQuandoApertaBotao();
 // enviarSinaisaCadaDoisSegundosJuntos();
enviarSinaisComDiferencaDeUmMilissegundo();


}

